// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/home-IoT/jupiter/server/models"
)

// GetSensorDataOKCode is the HTTP code returned for type GetSensorDataOK
const GetSensorDataOKCode int = 200

/*GetSensorDataOK Success

swagger:response getSensorDataOK
*/
type GetSensorDataOK struct {

	/*
	  In: Body
	*/
	Payload *models.SensorResponse `json:"body,omitempty"`
}

// NewGetSensorDataOK creates GetSensorDataOK with default headers values
func NewGetSensorDataOK() *GetSensorDataOK {
	return &GetSensorDataOK{}
}

// WithPayload adds the payload to the get sensor data o k response
func (o *GetSensorDataOK) WithPayload(payload *models.SensorResponse) *GetSensorDataOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sensor data o k response
func (o *GetSensorDataOK) SetPayload(payload *models.SensorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSensorDataOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSensorDataNotFoundCode is the HTTP code returned for type GetSensorDataNotFound
const GetSensorDataNotFoundCode int = 404

/*GetSensorDataNotFound Sensor not found.

swagger:response getSensorDataNotFound
*/
type GetSensorDataNotFound struct {
}

// NewGetSensorDataNotFound creates GetSensorDataNotFound with default headers values
func NewGetSensorDataNotFound() *GetSensorDataNotFound {
	return &GetSensorDataNotFound{}
}

// WriteResponse to the client
func (o *GetSensorDataNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// GetSensorDataGatewayTimeoutCode is the HTTP code returned for type GetSensorDataGatewayTimeout
const GetSensorDataGatewayTimeoutCode int = 504

/*GetSensorDataGatewayTimeout Sensor is not available.

swagger:response getSensorDataGatewayTimeout
*/
type GetSensorDataGatewayTimeout struct {
}

// NewGetSensorDataGatewayTimeout creates GetSensorDataGatewayTimeout with default headers values
func NewGetSensorDataGatewayTimeout() *GetSensorDataGatewayTimeout {
	return &GetSensorDataGatewayTimeout{}
}

// WriteResponse to the client
func (o *GetSensorDataGatewayTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(504)
}

/*GetSensorDataDefault Error

swagger:response getSensorDataDefault
*/
type GetSensorDataDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetSensorDataDefault creates GetSensorDataDefault with default headers values
func NewGetSensorDataDefault(code int) *GetSensorDataDefault {
	if code <= 0 {
		code = 500
	}

	return &GetSensorDataDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get sensor data default response
func (o *GetSensorDataDefault) WithStatusCode(code int) *GetSensorDataDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get sensor data default response
func (o *GetSensorDataDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get sensor data default response
func (o *GetSensorDataDefault) WithPayload(payload *models.ErrorResponse) *GetSensorDataDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sensor data default response
func (o *GetSensorDataDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSensorDataDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
