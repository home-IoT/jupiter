// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/home-IoT/jupiter/server/models"
)

// GetSensorDataRawOKCode is the HTTP code returned for type GetSensorDataRawOK
const GetSensorDataRawOKCode int = 200

/*GetSensorDataRawOK Success

swagger:response getSensorDataRawOK
*/
type GetSensorDataRawOK struct {

	/*
	  In: Body
	*/
	Payload *models.SensorResponseRaw `json:"body,omitempty"`
}

// NewGetSensorDataRawOK creates GetSensorDataRawOK with default headers values
func NewGetSensorDataRawOK() *GetSensorDataRawOK {
	return &GetSensorDataRawOK{}
}

// WithPayload adds the payload to the get sensor data raw o k response
func (o *GetSensorDataRawOK) WithPayload(payload *models.SensorResponseRaw) *GetSensorDataRawOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sensor data raw o k response
func (o *GetSensorDataRawOK) SetPayload(payload *models.SensorResponseRaw) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSensorDataRawOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetSensorDataRawNotFoundCode is the HTTP code returned for type GetSensorDataRawNotFound
const GetSensorDataRawNotFoundCode int = 404

/*GetSensorDataRawNotFound Sensor not found.

swagger:response getSensorDataRawNotFound
*/
type GetSensorDataRawNotFound struct {
}

// NewGetSensorDataRawNotFound creates GetSensorDataRawNotFound with default headers values
func NewGetSensorDataRawNotFound() *GetSensorDataRawNotFound {
	return &GetSensorDataRawNotFound{}
}

// WriteResponse to the client
func (o *GetSensorDataRawNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// GetSensorDataRawGatewayTimeoutCode is the HTTP code returned for type GetSensorDataRawGatewayTimeout
const GetSensorDataRawGatewayTimeoutCode int = 504

/*GetSensorDataRawGatewayTimeout Sensor is not available.

swagger:response getSensorDataRawGatewayTimeout
*/
type GetSensorDataRawGatewayTimeout struct {
}

// NewGetSensorDataRawGatewayTimeout creates GetSensorDataRawGatewayTimeout with default headers values
func NewGetSensorDataRawGatewayTimeout() *GetSensorDataRawGatewayTimeout {
	return &GetSensorDataRawGatewayTimeout{}
}

// WriteResponse to the client
func (o *GetSensorDataRawGatewayTimeout) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(504)
}

/*GetSensorDataRawDefault Error

swagger:response getSensorDataRawDefault
*/
type GetSensorDataRawDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetSensorDataRawDefault creates GetSensorDataRawDefault with default headers values
func NewGetSensorDataRawDefault(code int) *GetSensorDataRawDefault {
	if code <= 0 {
		code = 500
	}

	return &GetSensorDataRawDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get sensor data raw default response
func (o *GetSensorDataRawDefault) WithStatusCode(code int) *GetSensorDataRawDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get sensor data raw default response
func (o *GetSensorDataRawDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get sensor data raw default response
func (o *GetSensorDataRawDefault) WithPayload(payload *models.ErrorResponse) *GetSensorDataRawDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get sensor data raw default response
func (o *GetSensorDataRawDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetSensorDataRawDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
