// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SensorData sensor data
// swagger:model SensorData
type SensorData struct {

	// delta time
	// Required: true
	DeltaTime *int64 `json:"deltaTime"`

	// heat index
	HeatIndex float64 `json:"heatIndex,omitempty"`

	// humidity
	// Required: true
	Humidity *float64 `json:"humidity"`

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// stale
	// Required: true
	Stale *bool `json:"stale"`

	// temperature
	// Required: true
	Temperature *float64 `json:"temperature"`

	// timestamp
	// Required: true
	Timestamp *strfmt.DateTime `json:"timestamp"`
}

// Validate validates this sensor data
func (m *SensorData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeltaTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHumidity(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStale(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTemperature(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SensorData) validateDeltaTime(formats strfmt.Registry) error {

	if err := validate.Required("deltaTime", "body", m.DeltaTime); err != nil {
		return err
	}

	return nil
}

func (m *SensorData) validateHumidity(formats strfmt.Registry) error {

	if err := validate.Required("humidity", "body", m.Humidity); err != nil {
		return err
	}

	return nil
}

func (m *SensorData) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SensorData) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *SensorData) validateStale(formats strfmt.Registry) error {

	if err := validate.Required("stale", "body", m.Stale); err != nil {
		return err
	}

	return nil
}

func (m *SensorData) validateTemperature(formats strfmt.Registry) error {

	if err := validate.Required("temperature", "body", m.Temperature); err != nil {
		return err
	}

	return nil
}

func (m *SensorData) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	if err := validate.FormatOf("timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SensorData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SensorData) UnmarshalBinary(b []byte) error {
	var res SensorData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
