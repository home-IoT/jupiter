// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SensorData sensor data
// swagger:model SensorData
type SensorData struct {

	// delta time
	// Required: true
	DeltaTime *int64 `json:"deltaTime"`

	// device
	// Required: true
	Device *string `json:"device"`

	// dht22
	// Required: true
	Dht22 *SensorDataDht22 `json:"dht22"`

	// stale
	// Required: true
	Stale *int64 `json:"stale"`
}

// Validate validates this sensor data
func (m *SensorData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeltaTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDevice(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDht22(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStale(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SensorData) validateDeltaTime(formats strfmt.Registry) error {

	if err := validate.Required("deltaTime", "body", m.DeltaTime); err != nil {
		return err
	}

	return nil
}

func (m *SensorData) validateDevice(formats strfmt.Registry) error {

	if err := validate.Required("device", "body", m.Device); err != nil {
		return err
	}

	return nil
}

func (m *SensorData) validateDht22(formats strfmt.Registry) error {

	if err := validate.Required("dht22", "body", m.Dht22); err != nil {
		return err
	}

	if m.Dht22 != nil {

		if err := m.Dht22.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dht22")
			}
			return err
		}
	}

	return nil
}

func (m *SensorData) validateStale(formats strfmt.Registry) error {

	if err := validate.Required("stale", "body", m.Stale); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SensorData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SensorData) UnmarshalBinary(b []byte) error {
	var res SensorData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
